/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Murder.Components.Agents;
using Murder.Component;
using Murder.Components.Cutscenes;
using Murder.Components.Serialization;
using Murder.Components.Effects;
using Bang.Interactions;
using Murder.Components.Graphics;
using Bang.StateMachines;
using Bang.Components;
using HelloMurder.Components;
using Murder.StateMachines;
using Murder.Interactions;
using HelloMurder.StateMachines;
using Murder.Messages;
using Murder.Core.Graphics;
using Murder.Messages.Physics;
using HelloMurder.Messages;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum HelloMurderComponentType
    {
        Player = 133
    }

    public enum HelloMurderMessageType
    {
        AgentInput = 134,
        AgentReleaseInput = 135
    }

    public static class HelloMurderEntityExtensions
    {
        #region Component "Get" methods!
        public static PlayerComponent GetPlayer(this Entity e)
        {
            return e.GetComponent<PlayerComponent>(133);
        }
        #endregion
        
        #region Component "Has" checkers!
        public static bool HasPlayer(this Entity e)
        {
            return e.HasComponent(133);
        }
        #endregion
        
        #region Component "TryGet" methods!
        public static PlayerComponent? TryGetPlayer(this Entity e)
        {
            if (!e.HasPlayer())
            {
                return null;
            }

            return e.GetPlayer();
        }
        #endregion
        
        #region Component "Set" methods!
        public static void SetPlayer(this Entity e, PlayerComponent component)
        {
            e.AddOrReplaceComponent(component, 133);
        }

        public static void SetPlayer(this Entity e, HelloMurder.Components.PlayerStates state)
        {
            e.AddOrReplaceComponent(new PlayerComponent(state), 133);
        }

        public static void SetPlayer(this Entity e)
        {
            e.AddOrReplaceComponent(new PlayerComponent(), 133);
        }
        #endregion
        
        #region Component "Remove" methods!
        public static bool RemovePlayer(this Entity e)
        {
            return e.RemoveComponent(133);
        }
        #endregion

        #region Message "Has" checkers!
        internal static bool HasAgentInputMessage(this Entity e)
        {
            return e.HasMessage(134);
        }

        internal static bool HasAgentReleaseInputMessage(this Entity e)
        {
            return e.HasMessage(135);
        }
        #endregion
    }

    public class HelloMurderLookupImplementation : MurderLookupImplementation
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            86,
            117,
            117
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpeedMultiplier), 3 },
            { typeof(AgentSpeedOverride), 4 },
            { typeof(AgentSpriteComponent), 5 },
            { typeof(AlphaComponent), 6 },
            { typeof(AnimationCompleteComponent), 7 },
            { typeof(AnimationEventBroadcasterComponent), 8 },
            { typeof(AnimationOverloadComponent), 9 },
            { typeof(AnimationSpeedOverload), 10 },
            { typeof(AttackMultiplier), 11 },
            { typeof(BounceAmountComponent), 12 },
            { typeof(CameraFollowComponent), 13 },
            { typeof(CarveComponent), 14 },
            { typeof(ChoiceComponent), 15 },
            { typeof(ColliderComponent), 16 },
            { typeof(CollisionCacheComponent), 17 },
            { typeof(CustomCollisionMask), 18 },
            { typeof(CustomDrawComponent), 19 },
            { typeof(CustomTargetSpriteBatchComponent), 20 },
            { typeof(CutsceneAnchorsComponent), 21 },
            { typeof(CutsceneAnchorsEditorComponent), 22 },
            { typeof(DestroyAtTimeComponent), 23 },
            { typeof(DestroyOnAnimationCompleteComponent), 24 },
            { typeof(DestroyOnBlackboardConditionComponent), 25 },
            { typeof(DestroyOnCollisionComponent), 26 },
            { typeof(DisableAgentComponent), 27 },
            { typeof(DisableEntityComponent), 28 },
            { typeof(DisableParticleSystemComponent), 29 },
            { typeof(DisableSceneTransitionEffectsComponent), 30 },
            { typeof(DoNotPauseComponent), 31 },
            { typeof(DoNotPersistEntityOnSaveComponent), 32 },
            { typeof(DrawRectangleComponent), 33 },
            { typeof(EntityTrackerComponent), 34 },
            { typeof(EventListenerComponent), 35 },
            { typeof(EventListenerEditorComponent), 36 },
            { typeof(FacingComponent), 37 },
            { typeof(FadeScreenComponent), 38 },
            { typeof(FadeTransitionComponent), 39 },
            { typeof(FadeWhenInAreaComponent), 40 },
            { typeof(FadeWhenInCutsceneComponent), 41 },
            { typeof(FlashSpriteComponent), 42 },
            { typeof(FreeMovementComponent), 43 },
            { typeof(FreezeWorldComponent), 44 },
            { typeof(FrictionComponent), 45 },
            { typeof(GlobalShaderComponent), 46 },
            { typeof(GuidToIdTargetCollectionComponent), 47 },
            { typeof(GuidToIdTargetComponent), 48 },
            { typeof(HAAStarPathfindComponent), 49 },
            { typeof(HasVisionComponent), 50 },
            { typeof(HighlightOnChildrenComponent), 51 },
            { typeof(HighlightSpriteComponent), 52 },
            { typeof(IdTargetCollectionComponent), 53 },
            { typeof(IdTargetComponent), 54 },
            { typeof(IgnoreTriggersUntilComponent), 55 },
            { typeof(InCameraComponent), 56 },
            { typeof(IndestructibleComponent), 57 },
            { typeof(InsideMovementModAreaComponent), 58 },
            { typeof(InstanceToEntityLookupComponent), 59 },
            { typeof(InteractOnCollisionComponent), 60 },
            { typeof(InteractOnRuleMatchCollectionComponent), 61 },
            { typeof(InteractOnRuleMatchComponent), 62 },
            { typeof(InteractOnStartComponent), 63 },
            { typeof(InteractorComponent), 64 },
            { typeof(LineComponent), 65 },
            { typeof(MapComponent), 66 },
            { typeof(MovementModAreaComponent), 67 },
            { typeof(MoveToComponent), 68 },
            { typeof(MoveToPerfectComponent), 69 },
            { typeof(MusicComponent), 70 },
            { typeof(NineSliceComponent), 71 },
            { typeof(OnEnterOnExitComponent), 72 },
            { typeof(ParallaxComponent), 73 },
            { typeof(ParticleSystemComponent), 74 },
            { typeof(ParticleSystemWorldTrackerComponent), 75 },
            { typeof(PathfindComponent), 76 },
            { typeof(PauseAnimationComponent), 77 },
            { typeof(PickEntityToAddOnStartComponent), 78 },
            { typeof(PolygonSpriteComponent), 79 },
            { typeof(PrefabRefComponent), 80 },
            { typeof(PushAwayComponent), 81 },
            { typeof(QuadtreeComponent), 82 },
            { typeof(QuestTrackerComponent), 83 },
            { typeof(QuestTrackerRuntimeComponent), 84 },
            { typeof(RandomizeSpriteComponent), 85 },
            { typeof(RectPositionComponent), 86 },
            { typeof(ReflectionComponent), 87 },
            { typeof(RemoveColliderWhenStoppedComponent), 88 },
            { typeof(RemoveEntityOnRuleMatchAtLoadComponent), 89 },
            { typeof(RequiresVisionComponent), 90 },
            { typeof(RoomComponent), 91 },
            { typeof(RotateComponent), 92 },
            { typeof(RouteComponent), 93 },
            { typeof(RuleWatcherComponent), 94 },
            { typeof(ScaleComponent), 95 },
            { typeof(SituationComponent), 96 },
            { typeof(SoundComponent), 97 },
            { typeof(SoundParameterComponent), 98 },
            { typeof(SoundWatcherComponent), 99 },
            { typeof(SpeakerComponent), 100 },
            { typeof(SpriteComponent), 101 },
            { typeof(StateWatcherComponent), 102 },
            { typeof(StaticComponent), 103 },
            { typeof(StrafingComponent), 104 },
            { typeof(TextureComponent), 105 },
            { typeof(ThreeSliceComponent), 106 },
            { typeof(TileGridComponent), 107 },
            { typeof(TilesetComponent), 108 },
            { typeof(TintComponent), 109 },
            { typeof(UiDisplayComponent), 110 },
            { typeof(VelocityComponent), 111 },
            { typeof(VerticalPositionComponent), 112 },
            { typeof(WaitForVacancyComponent), 113 },
            { typeof(WindowRefreshTrackerComponent), 114 },
            { typeof(IStateMachineComponent), 115 },
            { typeof(IInteractiveComponent), 116 },
            { typeof(IMurderTransformComponent), 117 },
            { typeof(ITransformComponent), 117 },
            { typeof(PlayerComponent), 133 },
            { typeof(StateMachineComponent<Coroutine>), 115 },
            { typeof(StateMachineComponent<DialogStateMachine>), 115 },
            { typeof(InteractiveComponent<AddChildOnInteraction>), 116 },
            { typeof(InteractiveComponent<AddComponentOnInteraction>), 116 },
            { typeof(InteractiveComponent<AddEntityOnInteraction>), 116 },
            { typeof(InteractiveComponent<AdvancedBlackboardInteraction>), 116 },
            { typeof(InteractiveComponent<BlackboardActionInteraction>), 116 },
            { typeof(InteractiveComponent<DebugInteraction>), 116 },
            { typeof(InteractiveComponent<EnableChildrenInteraction>), 116 },
            { typeof(InteractiveComponent<InteractChildOnInteraction>), 116 },
            { typeof(InteractiveComponent<InteractionCollection>), 116 },
            { typeof(InteractiveComponent<PlayMusicInteraction>), 116 },
            { typeof(InteractiveComponent<PlaySoundInteraction>), 116 },
            { typeof(InteractiveComponent<RemoveEntityOnInteraction>), 116 },
            { typeof(InteractiveComponent<SendToOtherInteraction>), 116 },
            { typeof(InteractiveComponent<SendToParentInteraction>), 116 },
            { typeof(InteractiveComponent<SetPositionInteraction>), 116 },
            { typeof(InteractiveComponent<SetSoundOnInteraction>), 116 },
            { typeof(InteractiveComponent<StopMusicInteraction>), 116 },
            { typeof(InteractiveComponent<TalkToInteraction>), 116 },
            { typeof(PositionComponent), 117 },
            { typeof(StateMachineComponent<MainMenuStateMachine>), 115 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 118 },
            { typeof(AnimationEventMessage), 119 },
            { typeof(CollidedWithMessage), 120 },
            { typeof(FatalDamageMessage), 121 },
            { typeof(HighlightMessage), 122 },
            { typeof(InteractMessage), 123 },
            { typeof(InteractorMessage), 124 },
            { typeof(IsInsideOfMessage), 125 },
            { typeof(NextDialogMessage), 126 },
            { typeof(OnActorEnteredOrExitedMessage), 127 },
            { typeof(OnInteractExitMessage), 128 },
            { typeof(OnTriggerEnteredMessage), 129 },
            { typeof(PathNotPossibleMessage), 130 },
            { typeof(PickChoiceMessage), 131 },
            { typeof(TouchedGroundMessage), 132 },
            { typeof(AgentInputMessage), 134 },
            { typeof(AgentReleaseInputMessage), 135 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}