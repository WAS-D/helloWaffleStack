/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Murder.Components.Agents;
using Murder.Components.Cutscenes;
using Murder.Components.Serialization;
using Murder.Components.Effects;
using Bang.Interactions;
using Murder.Components.Graphics;
using Bang.StateMachines;
using Bang.Components;
using Murder.StateMachines;
using Murder.Interactions;
using HelloMurder.StateMachines;
using Murder.Messages;
using Murder.Core.Graphics;
using Road.Messages;
using Murder.Messages.Physics;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum HelloMurderComponentType
    {
        
    }

    public enum HelloMurderMessageType
    {
        
    }

    public static class HelloMurderEntityExtensions
    {
        #region Component "Get" methods!
        
        #endregion
        
        #region Component "Has" checkers!
        
        #endregion
        
        #region Component "TryGet" methods!
        
        #endregion
        
        #region Component "Set" methods!
        
        #endregion
        
        #region Component "Remove" methods!
        
        #endregion

        #region Message "Has" checkers!
        
        #endregion
    }

    public class HelloMurderLookupImplementation : MurderLookupImplementation
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            81,
            109,
            109
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpeedMultiplier), 3 },
            { typeof(AgentSpeedOverride), 4 },
            { typeof(AgentSpriteComponent), 5 },
            { typeof(AlphaComponent), 6 },
            { typeof(AnimationCompleteComponent), 7 },
            { typeof(AnimationEventBroadcasterComponent), 8 },
            { typeof(AnimationOverloadComponent), 9 },
            { typeof(AnimationSpeedOverload), 10 },
            { typeof(AttackMultiplier), 11 },
            { typeof(CameraFollowComponent), 12 },
            { typeof(CarveComponent), 13 },
            { typeof(ChoiceComponent), 14 },
            { typeof(ColliderComponent), 15 },
            { typeof(CollisionCacheComponent), 16 },
            { typeof(CustomCollisionMask), 17 },
            { typeof(CustomDrawComponent), 18 },
            { typeof(CustomTargetSpriteBatchComponent), 19 },
            { typeof(CutsceneAnchorsComponent), 20 },
            { typeof(CutsceneAnchorsEditorComponent), 21 },
            { typeof(DestroyAtTimeComponent), 22 },
            { typeof(DestroyOnAnimationCompleteComponent), 23 },
            { typeof(DestroyOnBlackboardConditionComponent), 24 },
            { typeof(DestroyOnCollisionComponent), 25 },
            { typeof(DisableAgentComponent), 26 },
            { typeof(DisableEntityComponent), 27 },
            { typeof(DisableParticleSystemComponent), 28 },
            { typeof(DoNotPauseComponent), 29 },
            { typeof(DoNotPersistEntityOnSaveComponent), 30 },
            { typeof(DrawRectangleComponent), 31 },
            { typeof(EntityTrackerComponent), 32 },
            { typeof(EventListenerComponent), 33 },
            { typeof(EventListenerEditorComponent), 34 },
            { typeof(FacingComponent), 35 },
            { typeof(FadeScreenComponent), 36 },
            { typeof(FadeTransitionComponent), 37 },
            { typeof(FadeWhenInAreaComponent), 38 },
            { typeof(FlashSpriteComponent), 39 },
            { typeof(FreeMovementComponent), 40 },
            { typeof(FreezeWorldComponent), 41 },
            { typeof(FrictionComponent), 42 },
            { typeof(GlobalShaderComponent), 43 },
            { typeof(GuidToIdTargetCollectionComponent), 44 },
            { typeof(GuidToIdTargetComponent), 45 },
            { typeof(HAAStarPathfindComponent), 46 },
            { typeof(HasVisionComponent), 47 },
            { typeof(HighlightOnChildrenComponent), 48 },
            { typeof(HighlightSpriteComponent), 49 },
            { typeof(IdTargetCollectionComponent), 50 },
            { typeof(IdTargetComponent), 51 },
            { typeof(IgnoreTriggersUntilComponent), 52 },
            { typeof(InCameraComponent), 53 },
            { typeof(IndestructibleComponent), 54 },
            { typeof(InstanceToEntityLookupComponent), 55 },
            { typeof(InteractOnCollisionComponent), 56 },
            { typeof(InteractOnRuleMatchCollectionComponent), 57 },
            { typeof(InteractOnRuleMatchComponent), 58 },
            { typeof(InteractOnStartComponent), 59 },
            { typeof(InteractorComponent), 60 },
            { typeof(LineComponent), 61 },
            { typeof(MapComponent), 62 },
            { typeof(MoveToComponent), 63 },
            { typeof(MoveToPerfectComponent), 64 },
            { typeof(MusicComponent), 65 },
            { typeof(NineSliceComponent), 66 },
            { typeof(OnEnterOnExitComponent), 67 },
            { typeof(ParallaxComponent), 68 },
            { typeof(ParticleSystemComponent), 69 },
            { typeof(ParticleSystemWorldTrackerComponent), 70 },
            { typeof(PathfindComponent), 71 },
            { typeof(PauseAnimationComponent), 72 },
            { typeof(PickEntityToAddOnStartComponent), 73 },
            { typeof(PolygonSpriteComponent), 74 },
            { typeof(PrefabRefComponent), 75 },
            { typeof(PushAwayComponent), 76 },
            { typeof(QuadtreeComponent), 77 },
            { typeof(QuestTrackerComponent), 78 },
            { typeof(QuestTrackerRuntimeComponent), 79 },
            { typeof(RandomizeSpriteComponent), 80 },
            { typeof(RectPositionComponent), 81 },
            { typeof(ReflectionComponent), 82 },
            { typeof(RemoveColliderWhenStoppedComponent), 83 },
            { typeof(RemoveEntityOnRuleMatchAtLoadComponent), 84 },
            { typeof(RequiresVisionComponent), 85 },
            { typeof(RoomComponent), 86 },
            { typeof(RotateComponent), 87 },
            { typeof(RouteComponent), 88 },
            { typeof(RuleWatcherComponent), 89 },
            { typeof(SituationComponent), 90 },
            { typeof(SoundComponent), 91 },
            { typeof(SoundParameterComponent), 92 },
            { typeof(SoundWatcherComponent), 93 },
            { typeof(SpeakerComponent), 94 },
            { typeof(SpriteComponent), 95 },
            { typeof(StaticComponent), 96 },
            { typeof(StrafingComponent), 97 },
            { typeof(TextBoxComponent), 98 },
            { typeof(ThreeSliceComponent), 99 },
            { typeof(TileGridComponent), 100 },
            { typeof(TilesetComponent), 101 },
            { typeof(UiDisplayComponent), 102 },
            { typeof(VelocityComponent), 103 },
            { typeof(VerticalPositionComponent), 104 },
            { typeof(WaitForVacancyComponent), 105 },
            { typeof(WindowRefreshTrackerComponent), 106 },
            { typeof(IStateMachineComponent), 107 },
            { typeof(IInteractiveComponent), 108 },
            { typeof(IMurderTransformComponent), 109 },
            { typeof(ITransformComponent), 109 },
            { typeof(StateMachineComponent<Coroutine>), 107 },
            { typeof(StateMachineComponent<DialogStateMachine>), 107 },
            { typeof(InteractiveComponent<AddChildOnInteraction>), 108 },
            { typeof(InteractiveComponent<AddComponentOnInteraction>), 108 },
            { typeof(InteractiveComponent<AddEntityOnInteraction>), 108 },
            { typeof(InteractiveComponent<AdvancedBlackboardInteraction>), 108 },
            { typeof(InteractiveComponent<BlackboardActionInteraction>), 108 },
            { typeof(InteractiveComponent<DebugInteraction>), 108 },
            { typeof(InteractiveComponent<InteractChildOnInteraction>), 108 },
            { typeof(InteractiveComponent<InteractionCollection>), 108 },
            { typeof(InteractiveComponent<PlayMusicInteraction>), 108 },
            { typeof(InteractiveComponent<RemoveEntityOnInteraction>), 108 },
            { typeof(InteractiveComponent<SendToOtherInteraction>), 108 },
            { typeof(InteractiveComponent<SetPositionInteraction>), 108 },
            { typeof(InteractiveComponent<SetSoundOnInteraction>), 108 },
            { typeof(InteractiveComponent<StopMusicInteraction>), 108 },
            { typeof(InteractiveComponent<TalkToInteraction>), 108 },
            { typeof(PositionComponent), 109 },
            { typeof(StateMachineComponent<MainMenuStateMachine>), 107 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 110 },
            { typeof(AnimationEventMessage), 111 },
            { typeof(CollidedWithMessage), 112 },
            { typeof(FatalDamageMessage), 113 },
            { typeof(HighlightMessage), 114 },
            { typeof(InteractMessage), 115 },
            { typeof(InteractorMessage), 116 },
            { typeof(IsInsideOfMessage), 117 },
            { typeof(NextDialogMessage), 118 },
            { typeof(OnActorEnteredOrExitedMessage), 119 },
            { typeof(OnInteractExitMessage), 120 },
            { typeof(OnTriggerEnteredMessage), 121 },
            { typeof(PathNotPossibleMessage), 122 },
            { typeof(PickChoiceMessage), 123 },
            { typeof(TouchedGroundMessage), 124 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}